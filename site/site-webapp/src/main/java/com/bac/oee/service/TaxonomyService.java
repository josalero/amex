package com.bac.oee.service;

import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bac.oee.content.Country;
import com.bac.oee.content.Country.MetroAreas;
import com.bac.oee.content.GeoArea;
import com.bac.oee.content.GeoTaxonomy;
import com.bac.oee.content.MetroArea;
import com.bac.oee.content.State;
import com.bac.oee.content.taxonomy.TaxonomyManager;

// TODO: Auto-generated Javadoc
/**
 * TaxonomyService exposes all the necessary services that the front end will
 * invoke to get taxonomy data back.
 * 
 * @author christopher.tai@starcomworldwide.com
 */
@Service("taxonomyService")
@SuppressWarnings("unused")
public class TaxonomyService implements InitializingBean {

	/** The Constant log. */
	private static final Log log = LogFactory.getLog(TaxonomyService.class);

	/** The taxonomy manager. */
	@Autowired
	private TaxonomyManager taxonomyManager;

	/* AutoGenerated Delegate Getters */
	/**
	 * Gets the country metro areas map.
	 * 
	 * @return the country metro areas map
	 */
	public Map<String, MetroAreas> getCountryMetroAreasMap() {
		return taxonomyManager.getCountryMetroAreasMap();
	}

	/**
	 * Gets the region country map.
	 * 
	 * @return the region country map
	 */
	public Map<Country, String> getRegionCountryMap() {
		return taxonomyManager.getRegionCountryMap();
	}

	/**
	 * Gets the country name to country map.
	 * 
	 * @return the country name to country map
	 */
	public Map<String, Country> getCountryNameToCountryMap() {
		return taxonomyManager.getCountryNameToCountryMap();
	}

	/**
	 * Gets the country id to country map.
	 * 
	 * @return the country id to country map
	 */
	public Map<String, Country> getCountryIdToCountryMap() {
		return taxonomyManager.getCountryIdToCountryMap();
	}

	/**
	 * Gets the geo taxonomy.
	 * 
	 * @return the geo taxonomy
	 */
	public GeoTaxonomy getGeoTaxonomy() {
		return taxonomyManager.getGeoTaxonomy();
	}

	/**
	 * Gets the program to ada friendly name map.
	 * 
	 * @return the program to ada friendly name map
	 */
	public Map<String, String> getProgramToAdaFriendlyNameMap() {
		return taxonomyManager.getProgramToAdaFriendlyNameMap();
	}

	/**
	 * Gets the topic to ada friendly name map.
	 * 
	 * @return the topic to ada friendly name map
	 */
	public Map<String, String> getTopicToAdaFriendlyNameMap() {
		return taxonomyManager.getTopicToAdaFriendlyNameMap();
	}

	/**
	 * Gets the region map.
	 * 
	 * @return the region map
	 */
	public Map<String, GeoArea> getRegionMap() {
		return taxonomyManager.getRegionMap();
	}

	/**
	 * Gets the region state map.
	 * 
	 * @return the region state map
	 */
	public Map<String, String> getRegionStateMap() {
		return taxonomyManager.getRegionStateMap();
	}

	/**
	 * Gets the region metro area map.
	 * 
	 * @return the region metro area map
	 */
	public Map<String, String> getRegionMetroAreaMap() {
		return taxonomyManager.getRegionMetroAreaMap();
	}

	/**
	 * Gets the region country id map.
	 * 
	 * @return the region country id map
	 */
	public Map<String, String> getRegionCountryIdMap() {
		return taxonomyManager.getRegionCountryIdMap();
	}

	/**
	 * Gets the state map.
	 * 
	 * @return the state map
	 */
	public Map<String, State> getStateMap() {
		return taxonomyManager.getStateMap();
	}

	/**
	 * Gets the state name map.
	 * 
	 * @return the state name map
	 */
	public Map<String, State> getStateNameMap() {
		return taxonomyManager.getStateNameMap();
	}

	/**
	 * Gets the metro area name map.
	 * 
	 * @return the metro area name map
	 */
	public Map<String, MetroArea> getMetroAreaNameMap() {
		return taxonomyManager.getMetroAreaNameMap();
	}

	/**
	 * Gets the metro area map.
	 * 
	 * @return the metro area map
	 */
	public Map<String, MetroArea> getMetroAreaMap() {
		return taxonomyManager.getMetroAreaMap();
	}

	/* Manual Spring Setters */
	/**
	 * Sets the taxonomy manager.
	 * 
	 * @param taxonomyManager
	 *            the new taxonomy manager
	 */
	public void setTaxonomyManager(TaxonomyManager taxonomyManager) {
		this.taxonomyManager = taxonomyManager;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
	 */
	@Override
	public void afterPropertiesSet() throws Exception {
		taxonomyManager.init();
	}
}
